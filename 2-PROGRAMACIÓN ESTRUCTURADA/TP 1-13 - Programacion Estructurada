package tp2_programacion_estructurada;

import java.util.Scanner;

/**
 * Trabajo Práctico 2: Programación Estructurada
 * TECNICATURA UNIVERSITARIA EN PROGRAMACIÓN A DISTANCIA
 * PROGRAMACIÓN II
 * 
 * Este programa implementa todos los ejercicios solicitados en el trabajo práctico,
 * abarcando desde estructuras condicionales hasta recursividad y arrays.
 * 
 * @author Archiria Facundo
 */
public class TrabajoPractico2 {
    
    // Variable global para el ejercicio 11 (descuento especial)
    private static final double DESCUENTO_GLOBAL = 0.10;
    
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("=== TRABAJO PRÁCTICO 2: PROGRAMACIÓN ESTRUCTURADA ===\n");
        
        mostrarMenu();
    }
    
    /**
     * Muestra el menú principal con todas las opciones de ejercicios
     */
    public static void mostrarMenu() {
        try (scanner) {
            int opcion;
            
            do {
                System.out.println("\n--- MENÚ PRINCIPAL ---");
                System.out.println("ESTRUCTURAS CONDICIONALES:");
                System.out.println("1. Verificación de Año Bisiesto");
                System.out.println("2. Mayor de Tres Números");
                System.out.println("3. Clasificación de Edad");
                System.out.println("4. Calculadora de Descuento por Categoría");
                
                System.out.println("\nESTRUCTURAS DE REPETICIÓN:");
                System.out.println("5. Suma de Números Pares (while)");
                System.out.println("6. Contador de Positivos, Negativos y Ceros (for)");
                System.out.println("7. Validación de Nota (do-while)");
                
                System.out.println("\nFUNCIONES:");
                System.out.println("8. Cálculo de Precio Final");
                System.out.println("9. Costo de Envío y Total de Compra");
                System.out.println("10. Actualización de Stock");
                System.out.println("11. Descuento Especial (Variable Global)");
                
                System.out.println("\nARRAYS Y RECURSIVIDAD:");
                System.out.println("12. Modificación de Array de Precios");
                System.out.println("13. Impresión Recursiva de Arrays");
                
                System.out.println("0. Salir");
                System.out.print("\nSeleccione una opción: ");
                
                opcion = scanner.nextInt();
                scanner.nextLine(); // Limpiar buffer
                
                ejecutarOpcion(opcion);
                
            } while (opcion != 0);
            
            System.out.println("¡Gracias por usar el programa!");
        }
    }
    
    /**
     * Ejecuta la opción seleccionada del menú
     * @param opcion Número de opción seleccionada
     */
    public static void ejecutarOpcion(int opcion) {
        System.out.println("\n" + "=".repeat(50));
        
        switch (opcion) {
            case 1 -> ejercicio1_AnioBisiesto();
            case 2 -> ejercicio2_MayorTresNumeros();
            case 3 -> ejercicio3_ClasificacionEdad();
            case 4 -> ejercicio4_CalculadoraDescuento();
            case 5 -> ejercicio5_SumaNumerosPares();
            case 6 -> ejercicio6_ContadorNumeros();
            case 7 -> ejercicio7_ValidacionNota();
            case 8 -> ejercicio8_PrecioFinal();
            case 9 -> ejercicio9_CostoEnvioTotal();
            case 10 -> ejercicio10_ActualizacionStock();
            case 11 -> ejercicio11_DescuentoEspecial();
            case 12 -> ejercicio12_ModificacionArrayPrecios();
            case 13 -> ejercicio13_ImpresionRecursivaArrays();
            case 0 -> {
            }
            default -> System.out.println("Opción inválida. Intente nuevamente.");
        }
        
        if (opcion != 0) {
            System.out.println("=".repeat(50));
            System.out.println("Presione Enter para continuar...");
            scanner.nextLine();
        }
    }
    
    // =============== ESTRUCTURAS CONDICIONALES ===============
    
    /**
     * Ejercicio 1: Verificación de Año Bisiesto
     * Un año es bisiesto si es divisible por 4, pero no por 100, salvo que sea divisible por 400
     */
    public static void ejercicio1_AnioBisiesto() {
        System.out.println("EJERCICIO 1: VERIFICACIÓN DE AÑO BISIESTO");
        System.out.print("Ingrese un año: ");
        int anio = scanner.nextInt();
        
        boolean esBisiesto = (anio % 4 == 0 && anio % 100 != 0) || (anio % 400 == 0);
        
        if (esBisiesto) {
            System.out.println("El año " + anio + " es bisiesto.");
        } else {
            System.out.println("El año " + anio + " no es bisiesto.");
        }
    }
    
    /**
     * Ejercicio 2: Determinar el Mayor de Tres Números
     */
    public static void ejercicio2_MayorTresNumeros() {
        System.out.println("EJERCICIO 2: MAYOR DE TRES NÚMEROS");
        System.out.print("Ingrese el primer número: ");
        int num1 = scanner.nextInt();
        System.out.print("Ingrese el segundo número: ");
        int num2 = scanner.nextInt();
        System.out.print("Ingrese el tercer número: ");
        int num3 = scanner.nextInt();
        
        int mayor;
        if (num1 >= num2 && num1 >= num3) {
            mayor = num1;
        } else if (num2 >= num1 && num2 >= num3) {
            mayor = num2;
        } else {
            mayor = num3;
        }
        
        System.out.println("El mayor es: " + mayor);
    }
    
    /**
     * Ejercicio 3: Clasificación de Edad
     */
    public static void ejercicio3_ClasificacionEdad() {
        System.out.println("EJERCICIO 3: CLASIFICACIÓN DE EDAD");
        System.out.print("Ingrese su edad: ");
        int edad = scanner.nextInt();
        
        String clasificacion;
        if (edad < 12) {
            clasificacion = "Niño";
        } else if (edad <= 17) {
            clasificacion = "Adolescente";
        } else if (edad <= 59) {
            clasificacion = "Adulto";
        } else {
            clasificacion = "Adulto mayor";
        }
        
        System.out.println("Eres un " + clasificacion + ".");
    }
    
    /**
     * Ejercicio 4: Calculadora de Descuento según Categoría
     */
    public static void ejercicio4_CalculadoraDescuento() {
        System.out.println("EJERCICIO 4: CALCULADORA DE DESCUENTO POR CATEGORÍA");
        System.out.print("Ingrese el precio del producto: ");
        double precio = scanner.nextDouble();
        scanner.nextLine(); // Limpiar buffer
        
        System.out.print("Ingrese la categoría del producto (A, B o C): ");
        String categoria = scanner.nextLine().toUpperCase();
        
        double porcentajeDescuento;
        switch (categoria) {
            case "A" -> porcentajeDescuento = 0.10;
            case "B" -> porcentajeDescuento = 0.15;
            case "C" -> porcentajeDescuento = 0.20;
            default -> {
                System.out.println("Categoría inválida.");
                return;
            }
        }
        
        double descuentoAplicado = precio * porcentajeDescuento;
        double precioFinal = precio - descuentoAplicado;
        
        System.out.println("Descuento aplicado: " + (int)(porcentajeDescuento * 100) + "%");
        System.out.println("Precio final: " + precioFinal);
    }
    
    // =============== ESTRUCTURAS DE REPETICIÓN ===============
    
    /**
     * Ejercicio 5: Suma de Números Pares (while)
     */
    public static void ejercicio5_SumaNumerosPares() {
        System.out.println("EJERCICIO 5: SUMA DE NÚMEROS PARES (WHILE)");
        int numero;
        int sumaPares = 0;
        
        do {
            System.out.print("Ingrese un número (0 para terminar): ");
            numero = scanner.nextInt();
            
            if (numero != 0 && numero % 2 == 0) {
                sumaPares += numero;
            }
        } while (numero != 0);
        
        System.out.println("La suma de los números pares es: " + sumaPares);
    }
    
    /**
     * Ejercicio 6: Contador de Positivos, Negativos y Ceros (for)
     */
    public static void ejercicio6_ContadorNumeros() {
        System.out.println("EJERCICIO 6: CONTADOR DE POSITIVOS, NEGATIVOS Y CEROS (FOR)");
        int positivos = 0, negativos = 0, ceros = 0;
        
        for (int i = 1; i <= 10; i++) {
            System.out.print("Ingrese el número " + i + ": ");
            int numero = scanner.nextInt();
            
            if (numero > 0) {
                positivos++;
            } else if (numero < 0) {
                negativos++;
            } else {
                ceros++;
            }
        }
        
        System.out.println("Resultados:");
        System.out.println("Positivos: " + positivos);
        System.out.println("Negativos: " + negativos);
        System.out.println("Ceros: " + ceros);
    }
    
    /**
     * Ejercicio 7: Validación de Nota entre 0 y 10 (do-while)
     */
    public static void ejercicio7_ValidacionNota() {
        System.out.println("EJERCICIO 7: VALIDACIÓN DE NOTA (DO-WHILE)");
        double nota;
        
        do {
            System.out.print("Ingrese una nota (0-10): ");
            nota = scanner.nextDouble();
            
            if (nota < 0 || nota > 10) {
                System.out.println("Error: Nota inválida. Ingrese una nota entre 0 y 10.");
            }
        } while (nota < 0 || nota > 10);
        
        System.out.println("Nota guardada correctamente.");
    }
    
    // =============== FUNCIONES ===============
    
    /**
     * Ejercicio 8: Cálculo del Precio Final con impuesto y descuento
     */
    public static void ejercicio8_PrecioFinal() {
        System.out.println("EJERCICIO 8: CÁLCULO DE PRECIO FINAL");
        System.out.print("Ingrese el precio base del producto: ");
        double precioBase = scanner.nextDouble();
        System.out.print("Ingrese el impuesto en porcentaje (Ejemplo: 10 para 10%): ");
        double impuesto = scanner.nextDouble() / 100;
        System.out.print("Ingrese el descuento en porcentaje (Ejemplo: 5 para 5%): ");
        double descuento = scanner.nextDouble() / 100;
        
        double precioFinal = calcularPrecioFinal(precioBase, impuesto, descuento);
        System.out.println("El precio final del producto es: " + precioFinal);
    }
    
    /**
     * Calcula el precio final de un producto aplicando impuesto y descuento
     * @param precioBase Precio base del producto
     * @param impuesto Porcentaje de impuesto (como decimal)
     * @param descuento Porcentaje de descuento (como decimal)
     * @return Precio final calculado
     */
    public static double calcularPrecioFinal(double precioBase, double impuesto, double descuento) {
        return precioBase + (precioBase * impuesto) - (precioBase * descuento);
    }
    
    /**
     * Ejercicio 9: Composición de funciones para calcular costo de envío y total de compra
     */
    public static void ejercicio9_CostoEnvioTotal() {
        System.out.println("EJERCICIO 9: COSTO DE ENVÍO Y TOTAL DE COMPRA");
        System.out.print("Ingrese el precio del producto: ");
        double precioProducto = scanner.nextDouble();
        System.out.print("Ingrese el peso del paquete en kg: ");
        double peso = scanner.nextDouble();
        scanner.nextLine(); // Limpiar buffer
        System.out.print("Ingrese la zona de envío (Nacional/Internacional): ");
        String zona = scanner.nextLine();
        
        double costoEnvio = calcularCostoEnvio(peso, zona);
        double totalCompra = calcularTotalCompra(precioProducto, costoEnvio);
        
        System.out.println("El costo de envío es: " + costoEnvio);
        System.out.println("El total a pagar es: " + totalCompra);
    }
    
    /**
     * Calcula el costo de envío basado en el peso y la zona
     * @param peso Peso del paquete en kg
     * @param zona Zona de envío (Nacional o Internacional)
     * @return Costo de envío calculado
     */
    public static double calcularCostoEnvio(double peso, String zona) {
        if (zona.equalsIgnoreCase("Nacional")) {
            return peso * 5;
        } else if (zona.equalsIgnoreCase("Internacional")) {
            return peso * 10;
        } else {
            return 0; // Zona no válida
        }
    }
    
    /**
     * Calcula el total de la compra sumando precio del producto y costo de envío
     * @param precioProducto Precio del producto
     * @param costoEnvio Costo del envío
     * @return Total de la compra
     */
    public static double calcularTotalCompra(double precioProducto, double costoEnvio) {
        return precioProducto + costoEnvio;
    }
    
    /**
     * Ejercicio 10: Actualización de stock a partir de venta y recepción de productos
     */
    public static void ejercicio10_ActualizacionStock() {
        System.out.println("EJERCICIO 10: ACTUALIZACIÓN DE STOCK");
        System.out.print("Ingrese el stock actual del producto: ");
        int stockActual = scanner.nextInt();
        System.out.print("Ingrese la cantidad vendida: ");
        int cantidadVendida = scanner.nextInt();
        System.out.print("Ingrese la cantidad recibida: ");
        int cantidadRecibida = scanner.nextInt();
        
        int nuevoStock = actualizarStock(stockActual, cantidadVendida, cantidadRecibida);
        System.out.println("El nuevo stock del producto es: " + nuevoStock);
    }
    
    /**
     * Actualiza el stock después de una venta y recepción de productos
     * @param stockActual Stock actual del producto
     * @param cantidadVendida Cantidad vendida
     * @param cantidadRecibida Cantidad recibida
     * @return Nuevo stock calculado
     */
    public static int actualizarStock(int stockActual, int cantidadVendida, int cantidadRecibida) {
        return stockActual - cantidadVendida + cantidadRecibida;
    }
    
    /**
     * Ejercicio 11: Cálculo de descuento especial usando variable global
     */
    public static void ejercicio11_DescuentoEspecial() {
        System.out.println("EJERCICIO 11: DESCUENTO ESPECIAL (VARIABLE GLOBAL)");
        System.out.print("Ingrese el precio del producto: ");
        double precio = scanner.nextDouble();
        
        calcularDescuentoEspecial(precio);
    }
    
    /**
     * Calcula el descuento especial usando la variable global
     * @param precio Precio del producto
     */
    public static void calcularDescuentoEspecial(double precio) {
        double descuentoAplicado = precio * DESCUENTO_GLOBAL;
        double precioFinalConDescuento = precio - descuentoAplicado;
        
        System.out.println("El descuento especial aplicado es: " + descuentoAplicado);
        System.out.println("El precio final con descuento es: " + precioFinalConDescuento);
    }
    
    // =============== ARRAYS Y RECURSIVIDAD ===============
    
    /**
     * Ejercicio 12: Modificación de un array de precios y visualización de resultados
     */
    public static void ejercicio12_ModificacionArrayPrecios() {
        System.out.println("EJERCICIO 12: MODIFICACIÓN DE ARRAY DE PRECIOS");
        
        // Declaración e inicialización del array
        double[] precios = {199.99, 299.5, 149.75, 399.0, 89.99};
        
        // Mostrar valores originales
        System.out.println("Precios originales:");
        for (double precio : precios) {
            System.out.println("Precio: $" + precio);
        }
        
        // Modificar el precio de un producto específico (índice 2)
        precios[2] = 129.99;
        
        // Mostrar valores modificados
        System.out.println("\nPrecios modificados:");
        for (double precio : precios) {
            System.out.println("Precio: $" + precio);
        }
    }
    
    /**
     * Ejercicio 13: Impresión recursiva de arrays antes y después de modificar un elemento
     */
    public static void ejercicio13_ImpresionRecursivaArrays() {
        System.out.println("EJERCICIO 13: IMPRESIÓN RECURSIVA DE ARRAYS");
        
        // Declaración e inicialización del array
        double[] precios = {199.99, 299.5, 149.75, 399.0, 89.99};
        
        // Mostrar precios originales usando recursión
        System.out.println("Precios originales:");
        imprimirArrayRecursivo(precios, 0);
        
        // Modificar el precio de un producto específico (índice 2)
        precios[2] = 129.99;
        
        // Mostrar precios modificados usando recursión
        System.out.println("\nPrecios modificados:");
        imprimirArrayRecursivo(precios, 0);
    }
    
    /**
     * Imprime un array de forma recursiva
     * @param array Array a imprimir
     * @param indice Índice actual para la recursión
     */
    public static void imprimirArrayRecursivo(double[] array, int indice) {
        // Caso base: si el índice es igual a la longitud del array, detener la recursión
        if (indice == array.length) {
            return;
        }
        
        // Imprimir el elemento actual
        System.out.println("Precio: $" + array[indice]);
        
        // Llamada recursiva con el siguiente índice
        imprimirArrayRecursivo(array, indice + 1);
    }
}